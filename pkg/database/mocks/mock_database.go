// Code generated by MockGen. DO NOT EDIT.
// Source: database.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	model "beneburg/pkg/database/model"
	context "context"
	gomock "github.com/golang/mock/gomock"
	gen "gorm.io/gen"
	reflect "reflect"
)

// MockDatabase is a mock of Database interface
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// AutoMigrate mocks base method
func (m *MockDatabase) AutoMigrate(models ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range models {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AutoMigrate", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AutoMigrate indicates an expected call of AutoMigrate
func (mr *MockDatabaseMockRecorder) AutoMigrate(models ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoMigrate", reflect.TypeOf((*MockDatabase)(nil).AutoMigrate), models...)
}

// CreateUser mocks base method
func (m *MockDatabase) CreateUser(ctx context.Context, user *model.User) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockDatabaseMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDatabase)(nil).CreateUser), ctx, user)
}

// UpdateOrCreateUser mocks base method
func (m *MockDatabase) UpdateOrCreateUser(ctx context.Context, user *model.User) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrCreateUser", ctx, user)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrCreateUser indicates an expected call of UpdateOrCreateUser
func (mr *MockDatabaseMockRecorder) UpdateOrCreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrCreateUser", reflect.TypeOf((*MockDatabase)(nil).UpdateOrCreateUser), ctx, user)
}

// CreateOrProlongToken mocks base method
func (m *MockDatabase) CreateOrProlongToken(ctx context.Context, telegramID int64) (*model.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrProlongToken", ctx, telegramID)
	ret0, _ := ret[0].(*model.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrProlongToken indicates an expected call of CreateOrProlongToken
func (mr *MockDatabaseMockRecorder) CreateOrProlongToken(ctx, telegramID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrProlongToken", reflect.TypeOf((*MockDatabase)(nil).CreateOrProlongToken), ctx, telegramID)
}

// GetUserByToken mocks base method
func (m *MockDatabase) GetUserByToken(ctx context.Context, token string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByToken", ctx, token)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByToken indicates an expected call of GetUserByToken
func (mr *MockDatabaseMockRecorder) GetUserByToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByToken", reflect.TypeOf((*MockDatabase)(nil).GetUserByToken), ctx, token)
}

// GetAllUsers mocks base method
func (m *MockDatabase) GetAllUsers(ctx context.Context) ([]*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers", ctx)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers
func (mr *MockDatabaseMockRecorder) GetAllUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockDatabase)(nil).GetAllUsers), ctx)
}

// GetUserByID mocks base method
func (m *MockDatabase) GetUserByID(ctx context.Context, id uint) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID
func (mr *MockDatabaseMockRecorder) GetUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockDatabase)(nil).GetUserByID), ctx, id)
}

// GetUserByTelegramID mocks base method
func (m *MockDatabase) GetUserByTelegramID(ctx context.Context, telegramID int64) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByTelegramID", ctx, telegramID)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByTelegramID indicates an expected call of GetUserByTelegramID
func (mr *MockDatabaseMockRecorder) GetUserByTelegramID(ctx, telegramID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByTelegramID", reflect.TypeOf((*MockDatabase)(nil).GetUserByTelegramID), ctx, telegramID)
}

// UpdateUserByID mocks base method
func (m *MockDatabase) UpdateUserByID(ctx context.Context, id uint, user *model.User) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserByID", ctx, id, user)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserByID indicates an expected call of UpdateUserByID
func (mr *MockDatabaseMockRecorder) UpdateUserByID(ctx, id, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserByID", reflect.TypeOf((*MockDatabase)(nil).UpdateUserByID), ctx, id, user)
}

// AcceptUser mocks base method
func (m *MockDatabase) AcceptUser(ctx context.Context, id uint) (*gen.ResultInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptUser", ctx, id)
	ret0, _ := ret[0].(*gen.ResultInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptUser indicates an expected call of AcceptUser
func (mr *MockDatabaseMockRecorder) AcceptUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptUser", reflect.TypeOf((*MockDatabase)(nil).AcceptUser), ctx, id)
}

// RejectUser mocks base method
func (m *MockDatabase) RejectUser(ctx context.Context, id uint) (*gen.ResultInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectUser", ctx, id)
	ret0, _ := ret[0].(*gen.ResultInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectUser indicates an expected call of RejectUser
func (mr *MockDatabaseMockRecorder) RejectUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectUser", reflect.TypeOf((*MockDatabase)(nil).RejectUser), ctx, id)
}

// SetUserStatus mocks base method
func (m *MockDatabase) SetUserStatus(ctx context.Context, id uint, status string) (*gen.ResultInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserStatus", ctx, id, status)
	ret0, _ := ret[0].(*gen.ResultInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUserStatus indicates an expected call of SetUserStatus
func (mr *MockDatabaseMockRecorder) SetUserStatus(ctx, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserStatus", reflect.TypeOf((*MockDatabase)(nil).SetUserStatus), ctx, id, status)
}

// CreateForm mocks base method
func (m *MockDatabase) CreateForm(ctx context.Context, form *model.Form) (*model.Form, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateForm", ctx, form)
	ret0, _ := ret[0].(*model.Form)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateForm indicates an expected call of CreateForm
func (mr *MockDatabaseMockRecorder) CreateForm(ctx, form interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateForm", reflect.TypeOf((*MockDatabase)(nil).CreateForm), ctx, form)
}

// GetFormByID mocks base method
func (m *MockDatabase) GetFormByID(ctx context.Context, id uint) (*model.Form, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFormByID", ctx, id)
	ret0, _ := ret[0].(*model.Form)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFormByID indicates an expected call of GetFormByID
func (mr *MockDatabaseMockRecorder) GetFormByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFormByID", reflect.TypeOf((*MockDatabase)(nil).GetFormByID), ctx, id)
}

// AcceptForm mocks base method
func (m *MockDatabase) AcceptForm(ctx context.Context, id uint) (*gen.ResultInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptForm", ctx, id)
	ret0, _ := ret[0].(*gen.ResultInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptForm indicates an expected call of AcceptForm
func (mr *MockDatabaseMockRecorder) AcceptForm(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptForm", reflect.TypeOf((*MockDatabase)(nil).AcceptForm), ctx, id)
}

// RejectForm mocks base method
func (m *MockDatabase) RejectForm(ctx context.Context, id uint) (*gen.ResultInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectForm", ctx, id)
	ret0, _ := ret[0].(*gen.ResultInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectForm indicates an expected call of RejectForm
func (mr *MockDatabaseMockRecorder) RejectForm(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectForm", reflect.TypeOf((*MockDatabase)(nil).RejectForm), ctx, id)
}

// GetActualForm mocks base method
func (m *MockDatabase) GetActualForm(ctx context.Context, telegramID int64) (*model.Form, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActualForm", ctx, telegramID)
	ret0, _ := ret[0].(*model.Form)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActualForm indicates an expected call of GetActualForm
func (mr *MockDatabaseMockRecorder) GetActualForm(ctx, telegramID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActualForm", reflect.TypeOf((*MockDatabase)(nil).GetActualForm), ctx, telegramID)
}

// GetLastForm mocks base method
func (m *MockDatabase) GetLastForm(ctx context.Context, telegramID int64) (*model.Form, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastForm", ctx, telegramID)
	ret0, _ := ret[0].(*model.Form)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastForm indicates an expected call of GetLastForm
func (mr *MockDatabaseMockRecorder) GetLastForm(ctx, telegramID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastForm", reflect.TypeOf((*MockDatabase)(nil).GetLastForm), ctx, telegramID)
}

// GetAllUserForms mocks base method
func (m *MockDatabase) GetAllUserForms(ctx context.Context, telegramID int64) ([]*model.Form, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUserForms", ctx, telegramID)
	ret0, _ := ret[0].([]*model.Form)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUserForms indicates an expected call of GetAllUserForms
func (mr *MockDatabaseMockRecorder) GetAllUserForms(ctx, telegramID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserForms", reflect.TypeOf((*MockDatabase)(nil).GetAllUserForms), ctx, telegramID)
}

// GetAllForms mocks base method
func (m *MockDatabase) GetAllForms(ctx context.Context) ([]*model.Form, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForms", ctx)
	ret0, _ := ret[0].([]*model.Form)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForms indicates an expected call of GetAllForms
func (mr *MockDatabaseMockRecorder) GetAllForms(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForms", reflect.TypeOf((*MockDatabase)(nil).GetAllForms), ctx)
}
