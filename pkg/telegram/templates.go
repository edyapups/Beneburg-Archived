package telegram

import (
	"beneburg/pkg/database/model"
	"beneburg/pkg/utils"
	"fmt"
	"html"
	"strings"
)

type Templator interface {
	InfoCommandNoReply() string
	InfoCommandNoUser() string
	FormInfo(form *model.Form) string
	UserIdWithHref(user *model.User) string
	InfoCommandReply(user *model.User, form *model.Form) string
	LoginCommandReply(token *model.Token) string
	StartCommandReply() string
	NewFormMessage(user *model.User, form *model.Form) string
	NewFormPoll() string
	AcceptFormReply(userStatus string) string
	FormReceived() string
	RejectFormReply(userStatus string) string
	RejectUserReply() string
	AcceptUserReply(link string) string
	AcceptUserGroupReply() string
	RejectUserGroupReply() string
	NewChatMember() string
}

var _ Templator = templator{}

type templator struct {
}

func (t templator) NewChatMember() string {
	return "–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üéâ"
}

func (t templator) RejectUserGroupReply() string {
	return "–ê–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
}

func (t templator) AcceptUserGroupReply() string {
	return "–ê–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–∏–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É."
}

func (t templator) AcceptUserReply(link string) string {
	stringBuilder := strings.Builder{}
	stringBuilder.WriteString("–£—Ä–∞, —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –º—ã —Ä–∞–¥—ã –ø—Ä–≥–ª–∞—Å–∏—Ç—å —Ç–µ–±—è –∫ –Ω–∞–º! üéâ\n")
	stringBuilder.WriteString("–¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏ ")
	stringBuilder.WriteString(fmt.Sprintf("<a href=\"%s\">—Å—é–¥–∞</a>", link))
	stringBuilder.WriteString(" –∏ –ø–æ–¥–∞–π –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ.")
	return stringBuilder.String()
}

func (t templator) RejectUserReply() string {
	return "–ò–∑–≤–∏–Ω–∏, –Ω–æ —Å–µ–π—á–∞—Å –º—ã –Ω–µ –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–Ω—è—Ç—å —Ç–µ–±—è –≤ —á–∞—Ç–∏–∫. –ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ —Ç–µ–±—è —ç—Ç–æ –Ω–µ –æ—á–µ–Ω—å —Ä–∞—Å—Å—Ç—Ä–æ–∏–ª–æ üò•"
}

func (t templator) RejectFormReply(userStatus string) string {
	if userStatus == model.UserStatusActive {
		return "–ê–Ω–∫–µ—Ç–∫—É –æ—Ç–∫–ª–æ–Ω–∏–ª–∏."
	}
	return "–ò–∑–≤–∏–Ω–∏, –Ω–æ —Å–µ–π—á–∞—Å –º—ã –Ω–µ –≥–æ—Ç–æ–≤—ã –ø—Ä–∏–Ω—è—Ç—å —Ç–µ–±—è –≤ —á–∞—Ç–∏–∫. –ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ —Ç–µ–±—è —ç—Ç–æ –Ω–µ –æ—á–µ–Ω—å —Ä–∞—Å—Å—Ç—Ä–æ–∏–ª–æ üò•"
}

func (t templator) FormReceived() string {
	return "–ú—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É, –æ–Ω–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
}

func (t templator) AcceptFormReply(userStatus string) string {
	if userStatus == model.UserStatusActive {
		return "–û–∫–µ–π, –æ–¥–æ–±—Ä–∏–ª–∏."
	}
	return "–ü—Ä–∏–≤–µ—Ç, —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ. –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–∂–∏–¥–∞–π –≤ –±–ª–∏–∂–∞–π—à–∏–µ —Å—É—Ç–∫–∏ üôÉ"
}

func (t templator) NewFormPoll() string {
	return "–ü—Ä–∏–Ω–∏–º–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞?"
}

func (t templator) NewFormMessage(user *model.User, form *model.Form) string {
	stringBuilder := strings.Builder{}
	stringBuilder.WriteString("<b>–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞!</b>")

	AddDelimiter(&stringBuilder)
	stringBuilder.WriteString(t.FormInfo(form))
	AddDelimiter(&stringBuilder)
	stringBuilder.WriteString(t.UserIdWithHref(user))

	return stringBuilder.String()
}

func (t templator) StartCommandReply() string {
	stringBuilder := strings.Builder{}
	stringBuilder.WriteString("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç–∫—É –≤ —á–∞—Ç.\n")
	stringBuilder.WriteString("–ù–∞–ø–∏—à–∏ –º–Ω–µ /login, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç.")
	AddDelimiter(&stringBuilder)
	stringBuilder.WriteString(fmt.Sprintf("<i>%s</i>", "(–±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–Ω–Ω–µ–π —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –≤–æ–∑–º–æ–∂–Ω—ã –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Å—Ç–æ–ª–∫–Ω—ë—à—å—Å—è —Å –Ω–∏–º–∏, –Ω–∞–ø–∏—à–∏ "))
	stringBuilder.WriteString(fmt.Sprintf("<a href=\"%s\">—Å—é–¥–∞</a>", "https://t.me/edyapups"))
	stringBuilder.WriteString(fmt.Sprintf("<i>%s</i>", ")"))
	return stringBuilder.String()
}

func (t templator) LoginCommandReply(token *model.Token) string {
	stringBuilder := strings.Builder{}
	stringBuilder.WriteString("–í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞:\n")
	stringBuilder.WriteString(html.EscapeString(utils.URLFromToken(token.UUID)))
	return stringBuilder.String()
}

func (t templator) InfoCommandNoUser() string {
	return "–£ –º–µ–Ω—è –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"
}

func (t templator) InfoCommandReply(user *model.User, form *model.Form) string {
	stringBuilder := strings.Builder{}
	stringBuilder.WriteString("<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ:</b>")

	AddDelimiter(&stringBuilder)
	stringBuilder.WriteString(t.FormInfo(form))
	AddDelimiter(&stringBuilder)
	stringBuilder.WriteString(t.UserIdWithHref(user))

	return stringBuilder.String()
}

func (t templator) UserIdWithHref(user *model.User) string {
	return fmt.Sprintf(
		"<i>ID <a href=\"tg://user?id=%d\">–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</a>: </i><code>%d</code>",
		user.TelegramID,
		user.TelegramID,
	)
}

func (t templator) FormInfo(form *model.Form) string {
	stringBuilder := strings.Builder{}
	stringBuilder.WriteString(fmt.Sprintf("<b>%s</b>:\n%s", model.UserNameDescription, form.Name))
	if form.Age != nil {
		AddDelimiter(&stringBuilder)
		stringBuilder.WriteString(fmt.Sprintf("<b>%s</b>:\n%d", model.UserAgeDescription, *form.Age))
	}
	AddDelimiter(&stringBuilder)
	stringBuilder.WriteString(fmt.Sprintf("<b>%s</b>:\n%s", model.UserGenderDescription, form.Gender))
	if form.About != nil {
		AddDelimiter(&stringBuilder)
		stringBuilder.WriteString(fmt.Sprintf("<b>%s</b>:\n%s", model.UserAboutDescription, *form.About))
	}
	if form.Hobbies != nil {
		AddDelimiter(&stringBuilder)
		stringBuilder.WriteString(fmt.Sprintf("<b>%s</b>:\n%s", model.UserHobbiesDescription, *form.Hobbies))
	}
	if form.Work != nil {
		AddDelimiter(&stringBuilder)
		stringBuilder.WriteString(fmt.Sprintf("<b>%s</b>:\n%s", model.UserWorkDescription, *form.Work))
	}
	if form.Education != nil {
		AddDelimiter(&stringBuilder)
		stringBuilder.WriteString(fmt.Sprintf("<b>%s</b>:\n%s", model.UserEducationDescription, *form.Education))
	}
	if form.CoverLetter != nil {
		AddDelimiter(&stringBuilder)
		stringBuilder.WriteString(fmt.Sprintf("<b>%s</b>:\n%s", model.UserCoverLetterDescription, *form.CoverLetter))
	}
	if form.Contacts != nil {
		AddDelimiter(&stringBuilder)
		stringBuilder.WriteString(fmt.Sprintf("<b>%s</b>:\n%s", model.UserContactsDescription, *form.Contacts))
	}
	return stringBuilder.String()
}

func AddDelimiter(stringBuilder *strings.Builder) {
	stringBuilder.WriteString("\n\n")
}

func (t templator) InfoCommandNoReply() string {
	return "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /info"
}

func NewTemplator() Templator {
	return &templator{}
}
